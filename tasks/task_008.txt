# Task ID: 8
# Title: Create Production Docker Compose Configuration for Coolify Deployment
# Status: done
# Dependencies: 1
# Priority: medium
# Description: Create production-ready Docker Compose configuration and environment files for Coolify cloud deployment, separating development and production environments with appropriate security considerations.
# Details:
## Implementation Details

### 1. Production Docker Compose Configuration
- Create a new `docker-compose.prod.yml` file optimized for production deployment on Coolify:
  ```yaml
  version: '3.8'
  
  services:
    api:
      image: ${DOCKER_REGISTRY}/locplat-api:${TAG:-latest}
      build:
        context: .
        dockerfile: Dockerfile
        args:
          - BUILD_ENV=production
      restart: unless-stopped
      depends_on:
        - postgres
        - redis
      environment:
        - DATABASE_URL=${DATABASE_URL}
        - REDIS_URL=${REDIS_URL}
        - LOG_LEVEL=INFO
        - ENVIRONMENT=production
        - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
        - API_KEY_ENCRYPTION_KEY=${API_KEY_ENCRYPTION_KEY}
      deploy:
        resources:
          limits:
            cpus: '1'
            memory: 1G
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s
    
    postgres:
      image: postgres:15-alpine
      restart: unless-stopped
      volumes:
        - postgres_data:/var/lib/postgresql/data
      environment:
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_DB=${POSTGRES_DB}
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 10s
        timeout: 5s
        retries: 5
      deploy:
        resources:
          limits:
            cpus: '0.5'
            memory: 512M
    
    redis:
      image: redis:7-alpine
      restart: unless-stopped
      volumes:
        - redis_data:/data
      command: redis-server --requirepass ${REDIS_PASSWORD}
      healthcheck:
        test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5
      deploy:
        resources:
          limits:
            cpus: '0.3'
            memory: 256M
  
  volumes:
    postgres_data:
    redis_data:
  ```

### 2. Environment File Updates
- Review and update `.env` for local development:
  ```
  # Local Development Environment
  
  # Database Configuration
  DATABASE_URL=postgresql://postgres:postgres@postgres:5432/locplat
  POSTGRES_USER=postgres
  POSTGRES_PASSWORD=postgres
  POSTGRES_DB=locplat
  
  # Redis Configuration
  REDIS_URL=redis://:redis_password@redis:6379/0
  REDIS_PASSWORD=redis_password
  
  # API Configuration
  LOG_LEVEL=DEBUG
  ENVIRONMENT=development
  ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8055
  
  # Security
  API_KEY_ENCRYPTION_KEY=local_development_key_replace_in_production
  
  # Provider Configuration
  DEFAULT_PROVIDER=openai
  FALLBACK_PROVIDERS=anthropic,mistral,deepseek
  
  # Docker Configuration
  DOCKER_REGISTRY=localhost
  TAG=dev
  ```

- Create `.env.production.template` for production deployment:
  ```
  # Production Environment Template
  # IMPORTANT: Replace all placeholder values before deployment
  
  # Database Configuration
  DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  POSTGRES_USER=<REPLACE_WITH_SECURE_USERNAME>
  POSTGRES_PASSWORD=<REPLACE_WITH_STRONG_PASSWORD>
  POSTGRES_DB=locplat_prod
  
  # Redis Configuration
  REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
  REDIS_PASSWORD=<REPLACE_WITH_STRONG_PASSWORD>
  
  # API Configuration
  LOG_LEVEL=INFO
  ENVIRONMENT=production
  ALLOWED_ORIGINS=https://your-production-domain.com,https://your-directus-instance.com
  
  # Security
  API_KEY_ENCRYPTION_KEY=<GENERATE_STRONG_32_CHAR_RANDOM_KEY>
  
  # Provider Configuration
  DEFAULT_PROVIDER=openai
  FALLBACK_PROVIDERS=anthropic,mistral,deepseek
  
  # Docker Configuration
  DOCKER_REGISTRY=your-registry.com
  TAG=latest
  ```

### 3. Coolify Deployment Documentation
- Create a `DEPLOYMENT.md` file with instructions for Coolify deployment:
  ```markdown
  # Deploying to Coolify
  
  ## Prerequisites
  - Coolify account and server setup
  - Docker registry access (optional for custom registry)
  
  ## Deployment Steps
  
  1. **Prepare Environment Variables**
     - Copy `.env.production.template` to `.env.production`
     - Replace all placeholder values with secure credentials
     - Add all variables to Coolify environment configuration
  
  2. **Configure Coolify Deployment**
     - Create a new service in Coolify
     - Connect to your Git repository
     - Set the build configuration:
       - Dockerfile: `Dockerfile`
       - Docker Compose file: `docker-compose.prod.yml`
     - Configure resource limits as needed
  
  3. **Database Persistence**
     - Configure persistent volumes for PostgreSQL and Redis
     - Set up database backups in Coolify
  
  4. **Security Considerations**
     - Enable HTTPS with automatic certificate management
     - Configure network policies to restrict access
     - Set up monitoring and alerts
  
  5. **Post-Deployment Verification**
     - Check the `/health` endpoint
     - Verify database migrations have run successfully
     - Test the translation API functionality
  ```

### 4. Security Enhancements
- Add `.dockerignore` file to prevent sensitive files from being included in the Docker image:
  ```
  .git
  .github
  .env*
  __pycache__
  *.pyc
  *.pyo
  *.pyd
  .Python
  env/
  venv/
  .venv/
  .pytest_cache/
  .coverage
  htmlcov/
  .tox/
  .nox/
  .hypothesis/
  .idea/
  .vscode/
  *.suo
  *.ntvs*
  *.njsproj
  *.sln
  *.sw?
  ```

- Update `Dockerfile` with multi-stage build for production:
  ```Dockerfile
  # Build stage
  FROM python:3.11-slim as builder
  
  WORKDIR /app
  
  RUN pip install --no-cache-dir poetry==1.6.1
  
  COPY pyproject.toml poetry.lock* ./
  
  RUN poetry export -f requirements.txt > requirements.txt
  
  # Production stage
  FROM python:3.11-slim
  
  WORKDIR /app
  
  RUN apt-get update && apt-get install -y --no-install-recommends \
      curl \
      && rm -rf /var/lib/apt/lists/*
  
  COPY --from=builder /app/requirements.txt .
  
  RUN pip install --no-cache-dir -r requirements.txt
  
  COPY . .
  
  # Create non-root user
  RUN adduser --disabled-password --gecos "" appuser && \
      chown -R appuser:appuser /app
  
  USER appuser
  
  EXPOSE 8000
  
  HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1
  
  CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
  ```

# Test Strategy:
## Test Strategy

### 1. Local Testing of Production Configuration

1. **Validate Docker Compose Production File**
   - Run syntax validation:
     ```bash
     docker-compose -f docker-compose.prod.yml config
     ```
   - Check for any errors or warnings in the output

2. **Test Local Production Build**
   - Create a test `.env.prod.test` file with safe test values
   - Build and run the production configuration locally:
     ```bash
     cp .env.production.template .env.prod.test
     # Edit .env.prod.test with test values
     docker-compose -f docker-compose.prod.yml --env-file .env.prod.test build
     docker-compose -f docker-compose.prod.yml --env-file .env.prod.test up -d
     ```
   - Verify all services start correctly and pass health checks:
     ```bash
     docker-compose -f docker-compose.prod.yml ps
     ```

3. **Verify Environment Variable Handling**
   - Test that all required environment variables are properly used
   - Intentionally omit critical variables to verify proper error handling:
     ```bash
     # Create a test file with missing variables
     grep -v "API_KEY_ENCRYPTION_KEY" .env.prod.test > .env.prod.missing
     # Test startup behavior
     docker-compose -f docker-compose.prod.yml --env-file .env.prod.missing up -d
     ```
   - Verify appropriate error messages are logged

### 2. Security Testing

1. **Environment File Security Check**
   - Verify `.env.production.template` doesn't contain any actual credentials
   - Ensure `.env.production` is in `.gitignore`
   - Validate that sensitive environment variables are properly documented

2. **Docker Image Security Scan**
   - Run security scanning on the production Docker image:
     ```bash
     docker scan $(docker-compose -f docker-compose.prod.yml config | grep 'image:' | awk '{print $2}' | head -1)
     ```
   - Address any critical or high vulnerabilities found

3. **Resource Limits Verification**
   - Verify resource limits are properly applied:
     ```bash
     docker stats --no-stream $(docker-compose -f docker-compose.prod.yml ps -q)
     ```
   - Check that containers respect the CPU and memory limits defined

### 3. Coolify Deployment Testing

1. **Staging Deployment Test**
   - Deploy to a staging environment on Coolify first
   - Verify all services start correctly
   - Check logs for any errors or warnings

2. **Environment Variable Propagation**
   - Verify all environment variables are correctly passed to containers
   - Test API functionality that depends on environment variables

3. **Health Check Verification**
   - Monitor the health check endpoint for 24 hours
   - Verify automatic recovery if a service becomes unhealthy

4. **Load Testing**
   - Run basic load tests against the staging deployment
   - Verify resource usage remains within expected limits
   - Check for any memory leaks or performance degradation

### 4. Documentation Testing

1. **Deployment Documentation Validation**
   - Have a team member follow the deployment instructions without assistance
   - Document any unclear steps or issues encountered
   - Update documentation based on feedback

2. **Environment Template Verification**
   - Verify that all required variables are included in the template
   - Check that placeholder values are clearly marked
   - Ensure security-sensitive variables have appropriate guidance

### 5. Rollback Testing

1. **Simulate Deployment Failure**
   - Intentionally introduce an error in the configuration
   - Verify Coolify's rollback mechanism works as expected
   - Document the rollback procedure in the deployment guide

2. **Version Rollback Test**
   - Deploy a specific version, then roll back to a previous version
   - Verify application functionality after rollback
   - Check database compatibility during version changes
