# Task ID: 9
# Title: Organize Project Folder Structure
# Status: pending
# Dependencies: 1, 8
# Priority: medium
# Description: Reorganize the project folder structure following Python/FastAPI best practices to ensure clean separation of concerns and proper file organization for the LocPlat AI translation service.
# Details:
## Current Issues
- Files may be misplaced or not following consistent organization patterns
- Need for better separation of concerns in the codebase
- Improved maintainability through proper directory structure

## Implementation Steps

### 1. Review and Document Current Structure
- Analyze the existing project structure
- Identify misplaced files and inconsistencies
- Document current organization issues

### 2. Define Target Structure
Implement the following improved structure based on FastAPI best practices:

```
locplat/
├── app/
│   ├── __init__.py
│   ├── main.py                  # FastAPI application entry point
│   ├── config.py                # Configuration management
│   ├── core/                    # Core application components
│   │   ├── __init__.py
│   │   ├── security.py          # Authentication and security
│   │   ├── exceptions.py        # Custom exception handlers
│   │   └── middleware.py        # Application middleware
│   ├── api/                     # API endpoints organized by domain
│   │   ├── __init__.py
│   │   ├── dependencies.py      # Shared API dependencies
│   │   ├── translation/         # Translation-specific endpoints
│   │   │   ├── __init__.py
│   │   │   ├── routes.py        # Translation route definitions
│   │   │   └── schemas.py       # Pydantic models for translation
│   │   └── health/              # Health check endpoints
│   │       ├── __init__.py
│   │       └── routes.py
│   ├── models/                  # Database models
│   │   ├── __init__.py
│   │   └── translation.py
│   ├── schemas/                 # Pydantic schemas (separate from API schemas)
│   │   ├── __init__.py
│   │   └── common.py
│   ├── services/                # Business logic services
│   │   ├── __init__.py
│   │   ├── translation/
│   │   │   ├── __init__.py
│   │   │   ├── service.py       # Translation orchestration
│   │   │   └── providers/       # AI provider implementations
│   │   │       ├── __init__.py
│   │   │       ├── base.py
│   │   │       ├── openai.py
│   │   │       ├── anthropic.py
│   │   │       ├── mistral.py
│   │   │       └── deepseek.py
│   │   ├── directus/            # Directus integration
│   │   │   ├── __init__.py
│   │   │   ├── client.py
│   │   │   └── webhooks.py
│   │   └── cache/               # Redis caching
│   │       ├── __init__.py
│   │       └── ai_response_cache.py
│   └── utils/                   # Utility functions
│       ├── __init__.py
│       └── helpers.py
├── tests/                       # Test directory
│   ├── __init__.py
│   ├── conftest.py
│   ├── api/
│   │   └── test_translation.py
│   └── services/
│       └── test_translation_service.py
├── alembic/                     # Database migrations
├── docker/                      # Docker-specific files
│   ├── Dockerfile.dev
│   └── Dockerfile.prod
├── scripts/                     # Utility scripts
├── .env.example                 # Example environment variables
├── docker-compose.yml           # Development docker-compose
├── docker-compose.prod.yml      # Production docker-compose
├── requirements.txt             # Production dependencies
├── requirements-dev.txt         # Development dependencies
└── README.md                    # Project documentation
```

### 3. Implement Reorganization
- Create any missing directories
- Move files to their appropriate locations
- Update import statements throughout the codebase
- Ensure circular imports are avoided
- Update Docker configurations to reflect new structure

### 4. Update Documentation
- Update README.md with new structure information
- Document organization patterns for future contributors
- Add docstrings to clarify module purposes

### 5. Update CI/CD Configuration
- Ensure CI/CD pipelines are updated to work with new structure
- Update any path references in GitHub Actions or other CI tools

### 6. Refactor Router Registration
- Update main.py to properly include all routers from the new structure
- Ensure proper API versioning and route prefixes

### Best Practices to Follow
- Keep related files together (domain-driven design)
- Separate business logic from API layer
- Maintain clear separation between models and schemas
- Use __init__.py files to simplify imports
- Follow consistent naming conventions
- Minimize circular dependencies

# Test Strategy:
## Testing Strategy

### 1. Verify Application Functionality
- Run the full test suite to ensure all tests pass after reorganization
- Manually test all API endpoints to verify they still function correctly
- Verify that the application starts without import errors
- Test both development and production Docker builds

### 2. Structure Verification
- Create a script to validate the new folder structure matches the defined target
- Verify all files have been moved to their appropriate locations
- Check for any orphaned files that weren't properly relocated

### 3. Import Validation
- Use a static analysis tool like `isort` to check import organization
- Run `flake8` or similar linter to catch any import errors
- Check for circular imports using a tool like `importlinter`

### 4. Documentation Testing
- Verify README accurately reflects the new structure
- Ensure docstrings are present and accurate for modules
- Validate that import examples in documentation are correct

### 5. CI/CD Pipeline Testing
- Run CI/CD pipeline to ensure it works with the new structure
- Verify that all GitHub Actions or other CI tools complete successfully
- Check that Docker builds complete without errors

### 6. Performance Testing
- Compare application startup time before and after reorganization
- Verify that API response times are not negatively affected

### 7. Deployment Testing
- Deploy to a staging environment to verify the reorganized structure works in production
- Test Coolify deployment specifically to ensure compatibility

### 8. Acceptance Criteria
- All tests pass
- Application runs without errors
- Docker builds successfully
- CI/CD pipeline completes without errors
- No regression in functionality
- Documentation accurately reflects new structure
- No orphaned files remain
