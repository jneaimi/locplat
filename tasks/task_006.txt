# Task ID: 6
# Title: Implement Directus Integration
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Complete remaining functionality for Directus CMS integration, focusing on schema introspection, advanced relationships, migration tools, and fixing current webhook validation issues.
# Details:
Based on analysis of existing implementation, many core Directus integration features are already in place. This task focuses on completing the remaining functionality and fixing current issues.

**Already Implemented:**
- Directus webhook integration with HMAC verification
- Automatic content translation via webhooks
- Multiple translation patterns support
- Batch translation support via existing infrastructure
- Security validation and sanitization
- Testing and dry-run endpoints
- Directus-specific data formatting

**Remaining Work:**

1. **Implement Schema Introspection**
   - Complete the schema introspection endpoint for automatic field detection
   - Add intelligence to identify translatable fields based on field type and content
   - Create UI suggestions for field selection

2. **Fix Webhook Validation Issues**
   - Resolve current 422 errors in webhook validation
   - Improve error handling and reporting
   - Add better validation for Directus payload structures

3. **Enhance Collection Relationships**
   - Implement support for handling complex collection relationships
   - Add support for translating related items
   - Ensure proper handling of nested collections

4. **Create Migration Tools**
   - Develop tools for migrating existing Directus translations
   - Add support for importing/exporting translation configurations
   - Create documentation for migration workflows

5. **Enhance Directus SDK Integration (if needed)**
   - Evaluate current SDK integration and enhance if necessary
   - Add support for newer Directus API features

Directus models (existing):
```python
from pydantic import BaseModel, Field
from typing import Dict, List, Any, Optional

class DirectusItem(BaseModel):
    id: str
    collection: str
    item: Dict[str, Any]

class DirectusBatchRequest(BaseModel):
    items: List[DirectusItem]
    target_language: str
    openai_key: str
    google_key: str
    source_language: str = "en"
    client_id: Optional[str] = None

class DirectusBatchResponse(BaseModel):
    items: List[Dict[str, Any]]
    stats: Dict[str, Any]

class DirectusWebhookPayload(BaseModel):
    event: str  # create, update, delete
    collection: str
    item: Dict[str, Any]
    target_languages: List[str]
    client_id: str
    openai_key: Optional[str] = None
    google_key: Optional[str] = None

class DirectusSchemaRequest(BaseModel):
    collection: str
    client_id: str
```

**Schema Introspection Implementation (to be completed):**
```python
@directus_router.post("/schema/introspect")
async def introspect_collection_schema(
    request: DirectusSchemaRequest,
    directus_service = Depends(get_directus_service)
):
    """Introspect a Directus collection schema to identify translatable fields"""
    schema = await directus_service.get_collection_schema(
        client_id=request.client_id,
        collection=request.collection
    )
    
    # Identify fields that are likely to contain translatable content
    translatable_fields = []
    for field in schema["fields"]:
        if field["type"] in ["string", "text", "json"] or field.get("interface") in ["input", "input-rich-text-md", "input-rich-text-html"]:
            translatable_fields.append(field["field"])
    
    # Add intelligence for detecting related collections and nested fields
    related_collections = []
    for field in schema["fields"]:
        if field.get("relation") and field["relation"].get("collection"):
            related_collections.append({
                "field": field["field"],
                "collection": field["relation"]["collection"]
            })
    
    return {
        "collection": request.collection,
        "schema": schema,
        "suggested_translatable_fields": translatable_fields,
        "related_collections": related_collections
    }
```

**Migration Tool Implementation (to be added):**
```python
@directus_router.post("/migration/export")
async def export_translation_config(
    client_id: str,
    field_mapper = Depends(get_field_mapper)
):
    """Export translation configuration for a client"""
    configs = await field_mapper.get_all_field_configs(client_id)
    return {
        "client_id": client_id,
        "configurations": configs,
        "exported_at": datetime.now().isoformat()
    }

@directus_router.post("/migration/import")
async def import_translation_config(
    config_data: Dict[str, Any],
    field_mapper = Depends(get_field_mapper)
):
    """Import translation configuration for a client"""
    client_id = config_data.get("client_id")
    configurations = config_data.get("configurations", [])
    
    if not client_id:
        raise HTTPException(status_code=400, detail="client_id is required")
    
    results = []
    for config in configurations:
        collection_name = config.get("collection_name")
        field_paths = config.get("field_paths", [])
        
        if collection_name:
            await field_mapper.save_field_config(
                client_id=client_id,
                collection_name=collection_name,
                field_paths=field_paths
            )
            results.append({
                "collection": collection_name,
                "status": "imported"
            })
    
    return {
        "status": "success",
        "imported_count": len(results),
        "details": results
    }
```

**Webhook Validation Fix (to be implemented):**
```python
# Enhanced validation for Directus webhook payloads
class EnhancedDirectusWebhookPayload(BaseModel):
    event: str  # create, update, delete
    collection: str
    item: Dict[str, Any]
    target_languages: List[str]
    client_id: str
    openai_key: Optional[str] = None
    google_key: Optional[str] = None
    
    @validator('event')
    def validate_event(cls, v):
        if v not in ["create", "update", "delete"]:
            raise ValueError(f"Event '{v}' not supported. Must be one of: create, update, delete")
        return v
    
    @validator('target_languages')
    def validate_languages(cls, v):
        if not v or len(v) == 0:
            raise ValueError("At least one target language must be specified")
        return v
    
    @validator('item')
    def validate_item(cls, v):
        if not v or not isinstance(v, dict):
            raise ValueError("Item must be a valid JSON object")
        return v

@directus_router.post("/webhook")
async def directus_webhook_handler(
    payload: EnhancedDirectusWebhookPayload,
    translation_service = Depends(get_translation_service)
):
    """Handle webhook events from Directus for auto-translation with improved validation"""
    if payload.event not in ["create", "update"]:
        return {"status": "ignored", "reason": f"Event {payload.event} not configured for translation"}
    
    # Rest of the implementation remains the same
    # ...
```

# Test Strategy:
1. Test schema introspection functionality:
   - Verify correct identification of translatable fields
   - Test with various collection types and field structures
   - Validate detection of related collections

2. Test webhook validation fixes:
   - Verify 422 errors are resolved
   - Test with malformed payloads to ensure proper error handling
   - Validate all edge cases for webhook payloads

3. Test advanced collection relationships:
   - Verify translation of nested collections
   - Test handling of one-to-many and many-to-many relationships
   - Validate circular reference handling

4. Test migration tools:
   - Verify export of translation configurations
   - Test import functionality
   - Validate migration from existing Directus installations

5. Test Directus SDK integration:
   - Verify compatibility with latest Directus versions
   - Test with actual Directus API responses

6. Regression testing:
   - Verify existing functionality still works:
     - Batch translation
     - Webhook processing
     - HMAC verification
     - Security validation

7. Performance testing:
   - Test with large collections
   - Verify performance with complex relationships
   - Benchmark migration tools with large datasets

# Subtasks:
## 6.1. Implement Schema Introspection [pending]
### Dependencies: None
### Description: Complete the schema introspection endpoint for automatic field detection and intelligent identification of translatable fields
### Details:


## 6.2. Fix Webhook Validation Issues [pending]
### Dependencies: None
### Description: Resolve current 422 errors in webhook validation by enhancing payload validation and improving error handling
### Details:


## 6.3. Enhance Collection Relationships Handling [pending]
### Dependencies: None
### Description: Implement support for complex collection relationships, including nested collections and related items translation
### Details:


## 6.4. Create Migration Tools [pending]
### Dependencies: None
### Description: Develop tools for migrating existing Directus translations and importing/exporting translation configurations
### Details:


## 6.5. Enhance Directus SDK Integration [pending]
### Dependencies: None
### Description: Evaluate current SDK integration and enhance if necessary to support newer Directus API features
### Details:


